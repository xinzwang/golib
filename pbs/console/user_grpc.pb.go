// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.10.0
// source: user.proto

package console

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UserDetailRpc(ctx context.Context, in *UserDetailReq, opts ...grpc.CallOption) (*User, error)
	UserListRpc(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRsp, error)
	DepDetailRpc(ctx context.Context, in *DepDetailReq, opts ...grpc.CallOption) (*Dep, error)
	PosDetailRpc(ctx context.Context, in *PosDetailReq, opts ...grpc.CallOption) (*Pos, error)
	CompanyDetailRpc(ctx context.Context, in *CompanyDetailReq, opts ...grpc.CallOption) (*Company, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserDetailRpc(ctx context.Context, in *UserDetailReq, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/console.UserService/UserDetailRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UserListRpc(ctx context.Context, in *UserListReq, opts ...grpc.CallOption) (*UserListRsp, error) {
	out := new(UserListRsp)
	err := c.cc.Invoke(ctx, "/console.UserService/UserListRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DepDetailRpc(ctx context.Context, in *DepDetailReq, opts ...grpc.CallOption) (*Dep, error) {
	out := new(Dep)
	err := c.cc.Invoke(ctx, "/console.UserService/DepDetailRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PosDetailRpc(ctx context.Context, in *PosDetailReq, opts ...grpc.CallOption) (*Pos, error) {
	out := new(Pos)
	err := c.cc.Invoke(ctx, "/console.UserService/PosDetailRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CompanyDetailRpc(ctx context.Context, in *CompanyDetailReq, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/console.UserService/CompanyDetailRpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	UserDetailRpc(context.Context, *UserDetailReq) (*User, error)
	UserListRpc(context.Context, *UserListReq) (*UserListRsp, error)
	DepDetailRpc(context.Context, *DepDetailReq) (*Dep, error)
	PosDetailRpc(context.Context, *PosDetailReq) (*Pos, error)
	CompanyDetailRpc(context.Context, *CompanyDetailReq) (*Company, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) UserDetailRpc(context.Context, *UserDetailReq) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDetailRpc not implemented")
}
func (UnimplementedUserServiceServer) UserListRpc(context.Context, *UserListReq) (*UserListRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserListRpc not implemented")
}
func (UnimplementedUserServiceServer) DepDetailRpc(context.Context, *DepDetailReq) (*Dep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepDetailRpc not implemented")
}
func (UnimplementedUserServiceServer) PosDetailRpc(context.Context, *PosDetailReq) (*Pos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PosDetailRpc not implemented")
}
func (UnimplementedUserServiceServer) CompanyDetailRpc(context.Context, *CompanyDetailReq) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyDetailRpc not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserDetailRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserDetailRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.UserService/UserDetailRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserDetailRpc(ctx, req.(*UserDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UserListRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserListRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.UserService/UserListRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserListRpc(ctx, req.(*UserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DepDetailRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DepDetailRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.UserService/DepDetailRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DepDetailRpc(ctx, req.(*DepDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PosDetailRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PosDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PosDetailRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.UserService/PosDetailRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PosDetailRpc(ctx, req.(*PosDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CompanyDetailRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CompanyDetailRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/console.UserService/CompanyDetailRpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CompanyDetailRpc(ctx, req.(*CompanyDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "console.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserDetailRpc",
			Handler:    _UserService_UserDetailRpc_Handler,
		},
		{
			MethodName: "UserListRpc",
			Handler:    _UserService_UserListRpc_Handler,
		},
		{
			MethodName: "DepDetailRpc",
			Handler:    _UserService_DepDetailRpc_Handler,
		},
		{
			MethodName: "PosDetailRpc",
			Handler:    _UserService_PosDetailRpc_Handler,
		},
		{
			MethodName: "CompanyDetailRpc",
			Handler:    _UserService_CompanyDetailRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
